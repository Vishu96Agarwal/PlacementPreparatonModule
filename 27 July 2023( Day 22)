#Leetcode Problem 114. Flatten Binary Tree to Linked List

class Solution {
public:

    TreeNode* helper(TreeNode* root){
        if(root==NULL){
            return NULL;
        }
        TreeNode* left = helper(root->left);
        TreeNode* right = helper(root->right);
        if(left == NULL && right == NULL){
            return root;
        }
        if(left == NULL){
            root->right = right;
            return root;
        }
        if(right == NULL){
            root->left = NULL;
            root->right = left;
            return root;
        }
        TreeNode* last = left;
        while(last->right!=NULL){
            last = last ->right;
        }
        root->right = left;
        last->right = right;
        root->left = NULL;
        return root;
    }

    void flatten(TreeNode* root) {
        root = helper(root);
    }
};


#Leetcode Problem 295. Find Median from Data Stream

class MedianFinder {
    priority_queue<int> maxHeap;
    priority_queue<int, vector<int>, greater<int>> minHeap;
public:
    MedianFinder() {
    }
    
    void addNum(int num) {
        if(maxHeap.size() == 0 || maxHeap.top() >= num) maxHeap.push(num);
        else minHeap.push(num);
        balancingHeaps();
        
    }
    
    double findMedian() {
        if(maxHeap.size() > minHeap.size()) return maxHeap.top();
        else if(minHeap.size() > maxHeap.size()) return minHeap.top();
        else return (maxHeap.top() + minHeap.top()) / 2.0;
        
    }
    void balancingHeaps(){
        if (maxHeap.size() > minHeap.size() + 1) {
			minHeap.push(maxHeap.top());
			maxHeap.pop();
		} else if (minHeap.size() > maxHeap.size() + 1) {
			maxHeap.push(minHeap.top());
			minHeap.pop();
		}

    }
};


#Leetcode Problem 703. Kth Largest Element in a Stream

class KthLargest {
public:
     
    priority_queue<int,vector<int>,greater<int>> pq;
    int sz;
    KthLargest(int k, vector<int>& nums) {

         sz = k;

        for(int i=0;i<nums.size();i++){
            pq.push(nums[i]);
        }
    }
    int add(int val) {
        
       pq.push(val);
        while(pq.size()>sz){
            pq.pop();
        }
        return pq.top();
    }
};


#Leetcode Problem 215. Kth Largest Element in an Array

class Solution {
public:
    int findKthLargest(vector<int>& v, int k) {
        priority_queue<int,vector<int>,greater<int>> minpq;
        int n = v.size();

        for(int i = 0;i < n;i++){
            if(minpq.size() < k) minpq.push(v[i]);
            else{
                if(minpq.top() < v[i]){
                    minpq.pop();
                    minpq.push(v[i]);
                }
            }
        }
        return minpq.top();
    }
};


#Leetcode Problem 733. Flood Fill

class Solution {
public:
    void bfs(int prevcolor,int row,int col,int color,vector<vector<int>>&visited,vector<vector<int>>&image)
    {
        // it'll ease the work
        queue<pair<int,int>> q;
        q.push({row,col});
        visited[row][col]=1;

        while(!q.empty())
        {
            row = q.front().first;
            col = q.front().second;
            q.pop();

            // if img is of the starting color.
            if(image[row][col]==prevcolor) image[row][col]=color;

            // up
            if(row-1>=0 && !visited[row-1][col] && image[row-1][col]==prevcolor) q.push({row-1,col}),visited[row-1][col]=1, image[row-1][col]=color;

            // right
            if(col+1<image[0].size() &&  !visited[row][col+1] && image[row][col+1]==prevcolor) q.push({row,col+1}),visited[row][col+1]=1, image[row][col+1]=color;

            //down
            if(row+1<image.size() && !visited[row+1][col] && image[row+1][col]==prevcolor) q.push({row+1,col}),visited[row+1][col]=1, image[row+1][col]=color;

            // left
            if(col-1>=0 && !visited[row][col-1] && image[row][col-1]==prevcolor) q.push({row,col-1}),visited[row][col-1]=1, image[row][col-1]=color;
        }
    }
    vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int color) {
          int prevcolor = image[sr][sc];

          // visiting array.
          vector<vector<int>> visited(image.size(),vector<int>(image[0].size(),0));

          bfs(prevcolor,sr,sc,color,visited,image);

          return image;
    }
};
