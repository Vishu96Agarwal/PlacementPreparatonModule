#Leetcode Problem 225. Implement Stack using Queues

class MyStack {
    queue<int> q;
public:
    MyStack() {
        
    }
    
    void push(int x) {
        int n = q.size();
        q.push(x);
        for (int i = 0; i < n; i++) {
            q.push(q.front());
            q.pop();
        }
    }
    
    int pop() {
        int x = q.front();
        q.pop();
        return x;
    }
    
    int top() {
        return q.front();
    }
    
    bool empty() {
        return q.empty();
    }
};


#Leetcode Problem 232. Implement Queue using Stacks

class MyQueue {
    // stack<int> input,output;
private:
    stack<int> input,output;
public:
    void push(int x) {
        input.push(x);
    }
    int pop() {
        if(output.empty()){
            while(!input.empty()){
                output.push(input.top());
                input.pop();
            }
        }
        int val=output.top();
        output.pop();
        return val;
    } 
    int peek() {
        if(output.empty()){
            while(!input.empty()){
                output.push(input.top());
                input.pop();
            }
        }
        return output.top();
    } 
    bool empty() {
        return input.empty() && output.empty();
    }
};


#Leetcode Problem 20. Valid Parentheses

class Solution {
public:
    bool isValid(string s) {
        stack<char> st; 
        for (char c : s) { 
            if (c == '(' || c == '{' || c == '[') { 
                st.push(c); 
            } else { 
                if (st.empty() || (c == ')' && st.top() != '(') ||(c == '}' && st.top() != '{') ||
                    (c == ']' && st.top() != '[')) {
                    return false; 
                }
                st.pop(); 
            }
        }
        return st.empty(); 
    }
};


#Leetcode Problem 496. Next Greater Element I

class Solution {
public:
    vector<int> nextGreaterElement(vector<int>& nums1, vector<int>& nums2) {
        vector<int> ans;
        for(int i=0; i<nums1.size(); i++) {
            int x=nums1[i];
            int res=-1;
            int k=0;
            for(int j=0; j<nums2.size(); j++) {
                if(nums2[j]==x) {
                    k=j;
                    break;
                }
            }
            for(int j=k+1; j<nums2.size(); j++) {
                if(nums2[j] > x) {
                    res=nums2[j];
                    break;
                }
            }
            ans.push_back(res);
        }
        return ans;
    }
};
