#Leetcode Problem 74. Search a 2D Matrix

class Solution {
public:
    bool searchMatrix(vector<vector<int>>& arr, int target) {
        int n=arr.size();
        int m=arr[0].size();
        int i=0;
        
        while(i<n)
        {
        if(target<=arr[i][m-1])
        {
            int j=0;
            while(j<m)
            {
                if(target==arr[i][j])
                return true;
                else if(target<arr[i][j])
                return false;
                else
                j++;
            }
            return false;
        }
        i++;
        }
               
    return false;
    }
};


#Leetcode Problem 50. Pow(x, n)

class Solution {
public:
    double myPow(double x, int n) {
        if (n == INT_MAX) return (x == 1) ? 1 : (x == -1) ? -1 : 0;
        if (n == INT_MIN) return (x == 1 || x == -1) ? 1 : 0;
        double num = 1;
        if(n>=0){
            while(n>0){
                num *= x;
                n--;
            }
        }
        else{
            n = -n;
            while(n>0){
                num *= x;
                n--;
            }
            num = 1.0/num;
        }
        return num;
    }
};


#Leetcode Problem 169. Majority Element

class Solution {
public:
    int majorityElement(vector<int>& arr) {
        int ele=arr[0];
        int count=0;
        for(int i=0;i<arr.size();i++){
            if(count==0)ele=arr[i];
            count+=(ele==arr[i])?1:-1;
        }
        return ele;
    }
};


#Leetcode Problem 229. Majority Element II

class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
        int countMajority = nums.size()/3;
        unordered_map<int, int> map;
        vector<int> output;
        for(auto num : nums){
            map[num]++;
        }
        for(auto num : map){
            if(num.second > countMajority){
                output.push_back(num.first);
            }
        }
        return output;
    }
};


#Leetcode Problem 62. Unique Paths

class Solution {
public:

    int rec(int m, int n,int a, int b, vector<vector<int>> &v)
    {
        if(v[m][n]!=-1)return v[m][n];

        if(m==a || n==b)return 1;

        v[m][n] = rec(m+1,n,a,b, v)+rec(m, n+1,a,b,v);
      
        return v[m][n];
    }

    int uniquePaths(int m, int n) {
        vector<vector<int>> v(m, vector<int>(n, -1));
        return rec(0,0,m-1,n-1, v);
    }
};


