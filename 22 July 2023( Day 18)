#Leetcode Problem 102. Binary Tree Level Order Traversal

class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        vector<vector<int>>ans;
        if(root == NULL)
        return ans;

        queue<TreeNode*> q;
        q.push(root);

        while(!q.empty()){
            int size=q.size();
            vector<int>level;
            for(int i=0;i<size;i++){
                TreeNode*node=q.front();
                q.pop();
                if(node->left!=NULL)
                q.push(node->left);
                 if(node->right!=NULL)
                q.push(node->right);
                level.push_back(node->val);
            }
            ans.push_back(level);
        }
 return ans;               
            }
};


#Leetcode Problem 104. Maximum Depth of Binary Tree

class Solution {
public:
    int maxDepth(TreeNode* root) {
        
        if(root== NULL)
        return 0;
        int l=maxDepth(root->left);
        int r=maxDepth(root->right);
        return 1+max(l,r);
    }
};


#Leetcode Problem 543. Diameter of Binary Tree

class Solution {
public:
    int maxi=0;
    int solve(TreeNode* &root){
        if (root==NULL)return 0;
        int left=solve(root->left);
        int right=solve(root->right);
        maxi=max(maxi,(left+right));
        return max(left,right)+1;
    }
    int diameterOfBinaryTree(TreeNode* root) {
        solve(root);
       return maxi;
    }
};


#Leetcode Problem 110. Balanced Binary Tree

class Solution {
public:
    bool isBalanced(TreeNode* root) {
        return height(root)!=-1;
    }
    int height(TreeNode*root){
        if(root == NULL)return 0;
        int l= height(root->left);
        if(l==-1)return -1;
        int r= height(root->right);
        if(r==-1)return -1;

        if(abs(l-r)>1)return -1;
        return max(l,r)+1;
    }
};


#Leetcode Problem 236. Lowest Common Ancestor of a Binary Tree

class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
         if (!root || root == p || root == q) return root;
    TreeNode* left = lowestCommonAncestor(root->left, p, q);
    TreeNode* right = lowestCommonAncestor(root->right, p, q);
    return !left ? right : !right ? left : root;
    }
};


#Leetcode Problem 100. Same Tree

class Solution {
public:
    bool isSameTree(TreeNode* p, TreeNode* q) {
        if(p==NULL || q==NULL){
        return p==q;
        }
return (p->val ==q->val) 
&& isSameTree(p->left,q->left) 
&& isSameTree(p->right, q->right);
    }
};


#Leetcode Problem 103. Binary Tree Zigzag Level Order Traversal

class Solution {
private:
    void pre(TreeNode* node,vector<vector<int>>& vv,int n) {
        if(!node) return;
        if(n<vv.size()) vv[n].push_back(node->val);
        else vv.push_back(vector<int>(1,node->val));
        pre(node->left,vv,n+1);
        pre(node->right,vv,n+1);
    }
public:
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
        vector<vector<int>> vv;
        pre(root,vv,0);
        for(int i=0;i<vv.size();i++) if(i&1) reverse(vv[i].begin(),vv[i].end());
        return vv;
    }
};



