#Leetcode Problem 124. Binary Tree Maximum Path Sum

class Solution {
public:
    int maxsum(TreeNode* root, int & maxi){
        if(!root) return 0;
        int l=max(maxsum(root->left,maxi),0);
        int r=max(maxsum(root->right,maxi),0);
        maxi=max(maxi,root->val+l+r);
        return root->val+max(l,r);
    }
    int maxPathSum(TreeNode* root){
        int maxi=INT_MIN;
        maxsum(root,maxi);
        return maxi;
    }
};


#Leetcode Problem 105. Construct Binary Tree from Preorder and Inorder Traversal

class Solution {
public:
    map<int,int>m;
    TreeNode* buildTree(vector<int>& pre, vector<int>& in) {
        for(int i=0;i<in.size();i++){
            m[in[i]]=i;
        }
        TreeNode* root = build(pre,0,pre.size()-1,in,0,in.size()-1);
        return root;
    }
    TreeNode* build(vector<int>&pre,int preStart,int preEnd,vector<int>&in, int inStart,int inEnd){
        if(preStart>preEnd || inStart>inEnd)return NULL;
        TreeNode* root = new  TreeNode(pre[preStart]);
        int index = m[pre[preStart]];
        int len = index - inStart;
        root->left = build(pre,preStart+1,preStart+len,in,inStart,index-1);
        root->right = build(pre,preStart+len+1,preEnd,in,index+1,inEnd);
        return root;
    }
};


#Leetcode Problem 106. Construct Binary Tree from Inorder and Postorder Traversal

class Solution {
public:

int findPosition(vector<int>& inorder, int element, int start, int end)
{
    for(int i=start;i<=end;i++)
    {
        if(inorder[i]==element)
        {
            return i;
        }
    }
    return -1;
}

TreeNode* solve(vector<int>& inorder, vector<int>& postorder, int n, int &postIndex, int inStart, int inEnd)
{
    // base case
    if(postIndex < 0 || inStart > inEnd)
    {
        return NULL;
    }
    
    int element=postorder[postIndex--];
    TreeNode* root=new TreeNode(element);
    int position=findPosition(inorder, element, inStart, inEnd);
    
    // Recursive Calls
    root->right=solve(inorder, postorder, n, postIndex, position+1, inEnd); 
    root->left=solve(inorder, postorder, n, postIndex, inStart, position-1);
    
    return root;

}

    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        
        int n=postorder.size();
        
        int postIndex=n-1;

        TreeNode* ans=solve(inorder, postorder, n, postIndex, 0, n-1);
    
        return ans;
    }
};


#Leetcode Problem 101. Symmetric Tree

class Solution {
public:
    bool isSymmetric(TreeNode* root) {
        return root == NULL || isSymmetricHelp(root->left,root->right);
    }
    bool isSymmetricHelp(TreeNode* left, TreeNode* right){
        if(left == NULL || right== NULL)
        return left == right;

        if(left->val!=right->val)return false;

        return isSymmetricHelp(left->left,right->right)
        &&
        isSymmetricHelp(left->right,right->left);
    
    }
};


#Leetcode Problem 114. Flatten Binary Tree to Linked List

class Solution {
public:

    TreeNode* helper(TreeNode* root){
        if(root==NULL){
            return NULL;
        }
        TreeNode* left = helper(root->left);
        TreeNode* right = helper(root->right);
        if(left == NULL && right == NULL){
            return root;
        }
        if(left == NULL){
            root->right = right;
            return root;
        }
        if(right == NULL){
            root->left = NULL;
            root->right = left;
            return root;
        }
        TreeNode* last = left;
        while(last->right!=NULL){
            last = last ->right;
        }
        root->right = left;
        last->right = right;
        root->left = NULL;
        return root;
    }

    void flatten(TreeNode* root) {
        root = helper(root);
    }
};


