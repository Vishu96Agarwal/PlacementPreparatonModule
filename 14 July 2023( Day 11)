#Leetcode Problem 540. Single Element in a Sorted Array

class Solution {
public:
    int singleNonDuplicate(vector<int>& nums) {
        int left = 0;
        int n = nums.size()-1;
        int right = n;
        while(left<=right){
            int mid = left+(right-left)/2;
            
            if((mid == 0 || nums[mid] != nums[mid-1]) &&( mid == n || nums[mid] != nums[mid+1] )) return nums[mid];
      
        int leftpart;
        if(nums[mid] == nums[mid-1])
        leftpart = mid-1;
        else leftpart = mid;
        
        if(leftpart%2 == 1) right = mid-1;
        else left = mid+1;

        }
        return 0;
    }
};


#Leetcode Problem 4. Median of Two Sorted Arrays

class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int n= nums1.size();
        int m= nums2.size();
        vector<int> nums(n+m);

        int index=0;
        int l=0;
        int r=0;
        while(l<n && r<m){
            if(nums1[l]<=nums2[r]){
                nums[index++]=nums1[l++];
            }
            else{
                nums[index++]=nums2[r++];
            }
        }
        while(l<n){
            nums[index++]=nums1[l++];
        }
        while(r<m){
            nums[index++]=nums2[r++];
        }

        double ans;
        int mid = (n+m)/2;
        if((n+m)%2==0){
            ans= (nums[mid] + nums[mid-1])/2.0;
        }
        else{
            ans= nums[mid];
        }
        return ans;
    }
};

