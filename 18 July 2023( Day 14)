#Leetcode Problem 146. LRU Cache

class LRUCache
{
    public:
        list<pair<int,int>> l;
        unordered_map<int,list<pair<int, int>>::iterator> m;
        int size;
        LRUCache(int capacity)
        {
            size=capacity;
        }
        int get(int key)
        {
            if(m.find(key)==m.end())
                return -1;
            l.splice(l.begin(),l,m[key]);
            return m[key]->second;
        }
        void put(int key, int value)
        {
            if(m.find(key)!=m.end())
            {
                l.splice(l.begin(),l,m[key]);
                m[key]->second=value;
                return;
            }
            if(l.size()==size)
            {
                auto d_key=l.back().first;
                l.pop_back();
                m.erase(d_key);
            }
            l.push_front({key,value});
            m[key]=l.begin();
        }
};


#Leetcode Problem 460. LFU Cache

class LFUCache {
    int capacity;
    int minFreq;
    unordered_map<int,pair<int,int>> keyVal;
    unordered_map<int,list<int>> freqList;
    unordered_map<int,list<int>::iterator> pos;
public:
    LFUCache(int capacity) {
        this->capacity = capacity;
        minFreq = 0;
    }
    
    int get(int key) {
        if(keyVal.find(key) == keyVal.end())
            return -1;
        freqList[keyVal[key].second].erase(pos[key]);
        keyVal[key].second++;
        freqList[keyVal[key].second].push_back(key);
        pos[key] = --freqList[keyVal[key].second].end();
        if(freqList[minFreq].empty())
            minFreq++;
        return keyVal[key].first;
    }
    
    void put(int key, int value) {
        if(!capacity)
            return;
        if(keyVal.find(key) != keyVal.end()) {
            keyVal[key].first = value;
            freqList[keyVal[key].second].erase(pos[key]);
            keyVal[key].second++;
            freqList[keyVal[key].second].push_back(key);
            pos[key] = --freqList[keyVal[key].second].end();
            if(freqList[minFreq].empty())
                minFreq++;
            return;
        }
        if(keyVal.size() == capacity) {
            int delKey = freqList[minFreq].front();
            keyVal.erase(delKey);
            pos.erase(delKey);
            freqList[minFreq].pop_front();
        }
        keyVal[key] = {value,1};
        freqList[1].push_back(key);
        pos[key] = --freqList[1].end();
        minFreq = 1;
    }
};


#Leetcode Problem 84. Largest Rectangle in Histogram

class Solution {
    vector<int> nextsmall(vector<int>& arr,int n){
         stack<int> s;
    s.push(-1);
        vector<int> ans(n);
        for(int i=arr.size()-1;i>=0;i--){
           
            while(s.top()!=-1&&arr[s.top()]>=arr[i])
            s.pop();
            if(s.empty()){
            ans[i]=arr[i];
            s.push(arr[i]);
            }
            else
            {
            ans[i]=s.top();
            s.push(i);
            
            }
            
        }
        return ans;
    }
    vector<int> prevsmall(vector<int>& arr,int n){
         stack<int> s;
    s.push(-1);
        vector<int> ans(n);
        for(int i=0;i<n;i++){
           
            while(s.top()!=-1&&arr[s.top()]>=arr[i])
            s.pop();
            if(s.empty()){
            ans[i]=arr[i];
            s.push(arr[i]);
            }
            else
            {
            ans[i]=s.top();
            s.push(i);
            
            }
            
        }
        return ans;
    }
public:
    int largestRectangleArea(vector<int>& heights) {
        int area=0;
        int n =heights.size();
        vector<int> next(n);
        vector<int> prev(n);
        next=nextsmall(heights,n);
        prev=prevsmall(heights,n);
        for(int i=0;i<n;i++){
            int l=heights[i];
            if(next[i]==-1)
            next[i]=n;
             int b=next[i]-prev[i]-1;
             int newarea=l*b;
             area=max(newarea,area);
        }
        return area;
    }
};


#Leetcode Problem 239. Sliding Window Maximum

class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {

        deque<int>dq;

        vector<int>ans;

        for(int i=0;i<k;i++){

            while(!dq.empty()&&nums[i]>=nums[dq.back()])
            dq.pop_back();

            dq.push_back(i);
        }

        ans.push_back(nums[dq.front()]);

        for(int i=k;i<nums.size();i++){

            if(!dq.empty()&&i-k>=dq.front()){
                dq.pop_front();
            }

  while(!dq.empty()&&nums[i]>=nums[dq.back()])
            dq.pop_back();

            dq.push_back(i);
        ans.push_back(nums[dq.front()]);
        }
         return ans;
    }
  
};


#Leetcode Problem 155. Min Stack

class MinStack {
public:

vector<pair<int,int>>s;
    MinStack() {
        
    }
    
    void push(int val) {
        if(s.empty())
        s.push_back({val,val});
        else
        s.push_back({val,min(s.back().second,val)});
    }
    
    void pop() {
        s.pop_back();
    }
    
    int top() {
        return s.back().first;
    }
    
    int getMin() {
        return s.back().second;
    }
};


#Leetcode Problem 994. Rotting Oranges

class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        vector<vector<int>> visited = grid;
       
        queue<pair<int, int>> q;
        int countFreshOrange = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (visited[i][j] == 2) {
                    q.push({i, j});
                }
                if (visited[i][j] == 1) {
                    countFreshOrange++;
                }
            }
        }
      
        if (countFreshOrange == 0)
            return 0;
        if (q.empty())
            return -1;
        
        int minutes = -1;
       
        vector<pair<int, int>> dirs = {{1, 0},{-1, 0},{0, -1},{0, 1}};
        while (!q.empty()) {
            int size = q.size();
            while (size--) {
                auto [x, y] = q.front();
                q.pop();
                for (auto [dx, dy] : dirs) {
                    int i = x + dx;
                    int j = y + dy;
                    if (i >= 0 && i < m && j >= 0 && j < n && visited[i][j] == 1) {
                        visited[i][j] = 2;
                        countFreshOrange--;
                        q.push({i, j});
                    }
                }
            }
            minutes++;
        }
        
        if (countFreshOrange == 0)
            return minutes;
        return -1;
    }
};


#Leetcode Problem 901. Online Stock Span

class StockSpanner {
public:
   vector<int>v1;
    vector<int>v2;
    StockSpanner() {
        
    }
    
    int next(int price) {
        v1.push_back(price);
        int n=v1.size()-1;
        if(n==0){v2.push_back(1);return 1;}
        int count=0;
        int temp=v1[n];
       
        for(int i=n;i>=0;i--){
            if(i>0 and temp<v1[i-1]){break;}
            else if(i>0){
                count+=v2[i-1];
                i=i-v2[i-1]+1;
             
            }   
            
        }
        count+=1;
        v2.push_back(count);
        return count;
    }
};
