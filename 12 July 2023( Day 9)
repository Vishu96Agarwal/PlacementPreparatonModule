#Leetcode Problem 90. Subsets II

class Solution {
public:    
    void subsetHelper(int idx, vector<int>& nums, int n, vector<int> &temp, vector<vector<int>>& ans) {
        ans.push_back(temp);
        for (int i = idx; i < n; i++) {
            if (i != idx && nums[i] == nums[i-1])
                continue;
            temp.push_back(nums[i]);
            subsetHelper(i+1, nums, n, temp, ans);
            temp.pop_back();
        }
    }

    vector<vector<int>> subsetsWithDup(vector<int>& nums) {
        int n = nums.size();
        vector<vector<int>> ans;
        vector<int> temp;
        sort(nums.begin(), nums.end());
        subsetHelper(0, nums, n, temp, ans);
        return ans;
    } 
};


#Leetcode Problem 39. Combination Sum

class Solution {
public:

    void solve(vector<int> &candidates, int target, vector<vector<int>> &result, vector<int> &ans, int idx, int n){

        if(target == 0){
            result.push_back(ans);
            return;
        }

        for(int i=idx;i<n;i++){
            if(candidates[i] > target)
                break;

            ans.push_back(candidates[i]);
            solve(candidates, target - candidates[i], result, ans, i, n);
            ans.pop_back();
        }
    }

    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        vector<vector<int>> result;
        vector<int> ans;
        int n = candidates.size();
        sort(candidates.begin(), candidates.end());
        solve(candidates, target, result, ans, 0, n);

        return result;
    }
};


#Leetcode Problem 131. Palindrome Partitioning

class Solution {
public:
    bool checkPalindrome(string str, int startIndex, int lastIndex){
        while(startIndex <= lastIndex){
            if(str[startIndex] != str[lastIndex])
                return false;
            startIndex++;
            lastIndex--;
        }
        return true;
    }
    void palindromePartition(int index, vector<string>& ds, vector<vector<string>>& output, string str){
        if(index == str.length()){
            output.push_back(ds);
            return;
        }
        for(int i = index; i < str.length(); i++){
            if(checkPalindrome(str, index, i)){
                ds.push_back(str.substr(index, i - index + 1));
                palindromePartition(i+1, ds, output, str);
                ds.pop_back();
            }
        }
    }
    vector<vector<string>> partition(string s) {
        vector<vector<string>> output;
        vector<string> ds;
        palindromePartition(0, ds, output, s);
        return output;
    }
};


#Leetcode Problem 60. Permutation Sequence

class Solution {
public:
    string getPermutation(int n, int k) {
        vector<int> v(n+1,false);
        vector<int> fact(n+1,1);
        for(int i = 2; i <= n; i++){
            fact[i] = fact[i-1]*i;
        }
        string ans = "";
        k--;
        for(int i = 1; i <= n; i++){
            int x = k/fact[n-i],j,y=k;
            k -= x*fact[n-i];
            for(j = 1; j <= n; j++){
                if(v[j]==false&&x==0){
                    break;
                }else if(v[j]==false){
                    x--;
                }
            }
            if(j<=n)
            v[j] = true;
            ans = ans + to_string(j);
        }
        return ans;
    }
};
