#Leetcode Problem 151. Reverse Words in a String

class Solution {
public:
    string reverseWords(string s) {

        string temp = "";
        string ans = "";

        // making left point to first non space char
        int left = 0;
        while (s[left] == ' ') {
            left++;
        }

        // making right point to last non space char
        int right = s.length() - 1;
        while (s[right] == ' ') {
            right--;
        }

        while (left <= right) {
            if (s[left] != ' ') {
                temp += s[left];
            }
            else {
                if (s[left - 1] == ' ') {
                    left++;
                    continue;
                }
                else {
                    ans = temp + " " + ans;
                    temp = "";
                }
            }
            left++;
        }
        ans = temp + " " + ans;
        ans.erase(ans.begin() + ans.length() - 1); // to erase extra space at the end
        return ans;
    }
};


#Leetcode Problem 5. Longest Palindromic Substring

class Solution {
private: 
    bool check(string &s, int i, int j){
        while(i<j){
            if(s[i] != s[j]){
                return false;
            }
            i++;
            j--;
        }
        return true;
    }            
public:
    string longestPalindrome(string s) {
        int n = s.size();
        int starting_index = 0;
        int max_len = 0;
        for(int i=0; i<n; i++){
            for(int j=i; j<n; j++){
                if(check(s, i, j)){
                    if(j-i+1 > max_len){
                        max_len = j-i+1;
                        starting_index = i;
                    }
                }
            }
        }
        return s.substr(starting_index, max_len);
    }
}; 


#Leetcode Problem 13. Roman to Integer

class Solution {
public:
    int romanToInt(string s) {
        int ans=0;
        unordered_map <char,int> mp{
        {'I',1},{'V',5},{'X',10},{'L',50},{'C',100},{'D',500},{'M',1000}};

    for(int i=0;i<s.size();i++){
        if(mp[s[i]]<mp[s[i+1]]){
           
            ans=ans-mp[s[i]];
        }
        else{
            ans=ans+mp[s[i]];
        }
    }
        return ans;
    }
};


#Leetcode Problem 8. String to Integer (atoi)

class Solution {
public:
    int myAtoi(string s) {
        int i = 0, n = s.size();

        while(s[i] == ' '){
            i++;
        }

        int positive = 0, negative = 0; 

        if(s[i] == '+'){
            positive++; 
            i++;
        }

        if(s[i] == '-'){
            negative++; 
            i++;
        }

        double ans = 0; 

        while(i<n and s[i] >= '0' and s[i] <= '9'){
            ans = ans*10 + (s[i] - '0'); 
            i++;
        }

        if(negative > 0)
            ans = -ans;
        if(positive > 0 and negative > 0) 
            return 0;

        if(ans > INT_MAX) 
            ans = INT_MAX;

        if(ans < INT_MIN) 
            ans = INT_MIN;

        return (int)ans;
    }
};


#Leetcode Problem 14. Longest Common Prefix

class Solution {
public:
    string longestCommonPrefix(vector<string>& str) {
        string ans="";
        sort(str.begin(),str.end());
        int n=str.size();
        string first=str[0],last=str[n-1];
        for(int i=0;i<min(first.size(),last.size());i++){
            if(first[i]!=last[i]){
                return ans;
            }
            ans+=first[i];
        }
        return ans;
    }
};


#Leetcode Problem 686. Repeated String Match

class Solution {
    pair<int,int> find_lps(string str1)
    {
         int n=str1.length();
        int lps[n];
        lps[0]=0;
        int len=0;
        int maxx=0;
        for(int i=1;i<n;)
        {
            if(str1[i]==str1[len])
            {
                len++;
                lps[i]=len;
                maxx=max(maxx,lps[i]);
                i++;
            }
            else
            {
                if(len>0)
                    len=lps[len-1];
                else
                {
                    lps[i]=0;
                    i++;
                }
            }
        }
        return {lps[n-1],maxx};
    }
public:
    int repeatedStringMatch(string a, string b) 
    {
        string s=b+"#"+a;
        auto [last,maxx]=find_lps(s);
        if(maxx==b.length())return 1;
        
        if(!last)return -1;
        int res=1e9;
        for(int i=-1;i<last;i++)
        {
            int temp=i==-1?0:1;
            int j;
            bool f=0;
            for(j=i+1;;j+=a.length())
            {
                if(j+a.length()>=b.length())break;
                if(b.substr(j,a.length())!=a){f=1;break;}
                temp++;
            }
            if(f)continue;
            if(j==b.length())res=min(res,temp);
            if(b.substr(j)!=a.substr(0,b.length()-j))continue;
            res=min(res,temp+1);
        }  
        return res==1e9?-1:res;
    }
};
