# Leetcode Problem 217. Contains Duplicate

class Solution {
public:
    bool containsDuplicate(vector<int>& arr) {
        sort(arr.begin(),arr.end());
        int j=0,cnt=0;
        for(int i=0;i<arr.size()-1;i++){
            if(arr[j]==arr[i+1])
                return true;
            else
                j++;
        }
        
        return false;
    }
};



#Leetcode Problem 53. Maximum Subarray

class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int res = nums[0];
        int maxEnding = nums[0];
        int n= nums.size();
        for(int i=1; i<n;i++)
        {
            maxEnding = max(maxEnding+ nums[i],nums[i]);
            res= max(res, maxEnding);
        }
        return res;
    }
};


#Leetcode Problem 73. Set Matrix Zeroes

class Solution {
public:
    void setZeroes(vector<vector<int>>& matrix) {
        int n = matrix.size();
        int m = matrix[0].size();
        vector<vector<int>> visited = matrix;
        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                if(matrix[i][j] == 0){
                    for(int k=0; k<m; k++){
                        visited[i][k] = 0;
                    }
                }
            }
        }
        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                if(matrix[i][j] == 0){
                    for(int k=0; k<n; k++){
                        visited[k][j] = 0;
                    }
                }
            }
        }
        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                matrix[i][j] = visited[i][j];
            }
        }
    }
};


#Leetcode Problem 118. Pascal's Triangle

class Solution {
 public:
  vector<vector<int>> generate(int numRows) {
    vector<vector<int>> ans;

    for (int i = 0; i < numRows; ++i)
      ans.push_back(vector<int>(i + 1, 1));

    for (int i = 2; i < numRows; ++i)
      for (int j = 1; j < ans[i].size() - 1; ++j)
        ans[i][j] = ans[i - 1][j - 1] + ans[i - 1][j];

    return ans;
  }
};


#Leetcode Problem 31. Next Permutation

class Solution {
public:
    void nextPermutation(vector<int>& nums) {
         next_permutation(nums.begin(),nums.end());
    }
};


#Leetcode Problem 53. Maximum Subarray

class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int res = nums[0];
        int maxEnding = nums[0];
        int n= nums.size();
        for(int i=1; i<n;i++)
        {
            maxEnding = max(maxEnding+ nums[i],nums[i]);
            res= max(res, maxEnding);
        }
        return res;
    }
};


#Leetcode Problem 75. Sort Colors

class Solution {
public:
    void sortColors(vector<int>& nums) {
        int l = 0;
        int m = 0;
        int h = nums.size()-1;

        while(m<=h){
            if(nums[m]==0){
                swap(nums[l], nums[m]);
                l++;
                m++;
            }
            else if(nums[m]==1){
                m++;
            }
            else if(nums[m]==2){
                swap(nums[m], nums[h]);
                h--;
            }
        }
    }
};


#Leetcode Problem 121. Best time to buy and sell stocks


class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int n = prices.size();
        int i =0,j=n-1;
        int min = prices[0];
        int profit = 0;
        for(int i=1;i<n;i++){
            if(prices[i]>min){
               profit = max(profit,prices[i]-min);
            }else if (prices[i]<min){
                min = prices[i];
            }else{
                continue;
            }
        }
        cout<<min;
        return profit;
    }
};
