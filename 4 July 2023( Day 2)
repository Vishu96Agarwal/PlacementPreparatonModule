#Leetcode Problem 48. Roatate Images

class Solution {
public:
    void rotate(vector<vector<int>>& matrix) {
        
        int n= matrix.size();

        for(int i=0;i<n;i++){
            for(int j=i+1;j<n;j++){
                swap(matrix[i][j],matrix[j][i]);
            }
        }

        for(int i=0;i<n;i++){
            for(int j=0;j<n/2;j++){
                swap(matrix[i][j],matrix[i][n-j-1]);
            }
        } 
    }
};


#Leetcode Problem 56. Merge Intervals


class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        
      if(intervals.size()==1)
         return intervals;
      vector<pair<int,int>> p;
      for(int i=0;i<intervals.size();i++)
      {
          p.push_back({intervals[i][0],intervals[i][1]});
      } 
      sort(p.begin(),p.end());

      vector<vector<int>> ans;
      int f=p[0].first,s=p[0].second;
      for(int i=0;i<p.size()-1;i++)
      {
          vector<int> a(2);
          if(s>=p[i+1].first)
          {
              s=max(s,p[i+1].second);
          }
          else
          {
              a[0]=f;
              a[1]=s;
              f=p[i+1].first;
              s=p[i+1].second;
              ans.push_back(a);
          }
      } 
      int n=intervals.size();
      ans.push_back({f,s});
      return ans;
    }
};


#Leetcode Problem 88. Merge Sorted Array

class Solution {
public:
    void merge(vector<int>& arr1, int m, vector<int>& arr2, int n) {
        for(int i=0; i<n; i++){
            arr1[m+i] = arr2[i];
        }
        sort(arr1.begin(), arr1.end());
    }
};


#Leetcode Problem 287. Find Duplicate

class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        vector<bool>hash(nums.size(),false);
    for(int i=0;i<nums.size();i++)
        {
        if(hash[nums[i]]){return nums[i];}
        hash[nums[i]]=true;
        
        }
        
        return 1;
    }
};




