#Leetcode Problem 215. Kth Largest Element in an Array

class Solution {
public:
    int findKthLargest(vector<int>& v, int k) {
        priority_queue<int,vector<int>,greater<int>> minpq;
        int n = v.size();

        for(int i = 0;i < n;i++){
            if(minpq.size() < k) minpq.push(v[i]);
            else{
                if(minpq.top() < v[i]){
                    minpq.pop();
                    minpq.push(v[i]);
                }
            }
        }
        return minpq.top();
    }
};


#Leetcode Problem 295. Find Median from Data Stream

class MedianFinder {
    priority_queue<int> maxHeap;
    priority_queue<int, vector<int>, greater<int>> minHeap;
public:
    MedianFinder() {
    }
    
    void addNum(int num) {
        if(maxHeap.size() == 0 || maxHeap.top() >= num) maxHeap.push(num);
        else minHeap.push(num);
        balancingHeaps();
        
    }
    
    double findMedian() {
        if(maxHeap.size() > minHeap.size()) return maxHeap.top();
        else if(minHeap.size() > maxHeap.size()) return minHeap.top();
        else return (maxHeap.top() + minHeap.top()) / 2.0;
        
    }
    void balancingHeaps(){
        if (maxHeap.size() > minHeap.size() + 1) {
			minHeap.push(maxHeap.top());
			maxHeap.pop();
		} else if (minHeap.size() > maxHeap.size() + 1) {
			maxHeap.push(minHeap.top());
			minHeap.pop();
		}

    }
};


#Leetcode Problem 347. Top K Frequent Elements

class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
        unordered_map<int, int> counter;
        for (int num : nums) {
            counter[num]++;
        }
        
        auto cmp = [](const pair<int, int>& a, const pair<int, int>& b) {
            return a.second > b.second; // Sort in descending order of frequency
        };
        priority_queue<pair<int, int>, vector<pair<int, int>>, decltype(cmp)> heap(cmp);
        
        for (const auto& entry : counter) {
            heap.push(entry);
            if (heap.size() > k) {
                heap.pop();
            }
        }
        
        vector<int> result;
        while (!heap.empty()) {
            result.push_back(heap.top().first);
            heap.pop();
        }
        
        return result;
    }
};
