#Leetcode Problem 133. Clone Graph
                                         
class Solution {
    public:
    Node* dfs(Node* cur,unordered_map<Node*,Node*>& mp)
    {
        vector<Node*> neighbour;
        Node* clone=new Node(cur->val);
        mp[cur]=clone;
            for(auto it:cur->neighbors)
            {
                if(mp.find(it)!=mp.end())  
                {
                    neighbour.push_back(mp[it]);
                }
                else
                    neighbour.push_back(dfs(it,mp));
            }
            clone->neighbors=neighbour;
            return clone;
    }
    Node* cloneGraph(Node* node) {
        unordered_map<Node*,Node*> mp;
        if(node==NULL)
            return NULL;
        if(node->neighbors.size()==0)  
        {
            Node* clone= new Node(node->val);
            return clone; 
        }
        return dfs(node,mp);
    }
};


#Leetcode Problem 207. Course Schedule

class Solution {
public:
    bool canFinish(int n, vector<vector<int>>& prerequisites) {
        vector<int> adj[n];
        vector<int> indegree(n, 0);
        vector<int> ans;

        for(auto x: prerequisites){
            adj[x[0]].push_back(x[1]);
            indegree[x[1]]++;
        }

        queue<int> q;
        for(int i = 0; i < n; i++){
            if(indegree[i] == 0){
                q.push(i);
            }
        }

        while(!q.empty()){
            auto t = q.front();
            ans.push_back(t);
            q.pop();

            for(auto x: adj[t]){
                indegree[x]--;
                if(indegree[x] == 0){
                    q.push(x);
                }
            }
        }
        return ans.size() == n;
    }
};


#Leetcode Problem 200. Number of Islands

class Solution {
public:
    int numIslands(vector<vector<char>>& grid) {
        int ans=0,r=grid.size(),c=grid[0].size();
        int dir_r[]={1,-1,0,0};  // Just to make dirctions easy
        int dir_c[]={0,0,1,-1};  // Down,Up,Right,Left
        vector<vector<bool>> vis(r,vector(c,false));

        for(int i=0;i<r;i++){
            for(int j=0;j<c;j++){
                if(grid[i][j]=='0' || vis[i][j])  
                    continue;
                queue<pair<int,int>> q;
                q.push({i,j});
                ans++;
                vis[i][j]=true;
                while(!q.empty()){
                    auto pre=q.front();
                    q.pop();
                    for(int d=0;d<4;d++){
                        int qr= pre.first + dir_r[d];
                        int qc= pre.second + dir_c[d];
                        if(qr<0 || qr >= r || qc<0 || qc>= c){  nothing then
                            continue;
                        } 
                        if(grid[qr][qc]=='0') continue;  
                        if(vis[qr][qc]) continue;  
                        q.push({qr,qc});
                        vis[qr][qc]=true;
                    }                    
                }
            }
        } 
        return ans;        
    }
};


#Leetcode Problem 785. Is Graph Bipartite?

class Solution {
public:
    bool isBipartite(vector<vector<int>>& gr) {
        int n = gr.size();
        vector<int> colour(n, 0);

        for(int node = 0; node < n; node++){
            if(colour[node] != 0) continue;

            queue<int> q;
            q.push(node);
            colour[node] = 1;

            while(!q.empty()){
                int cur = q.front();
                q.pop();

                for(int ne : gr[cur]){
                    if(colour[ne] == 0){
                        colour[ne] = -colour[cur];
                        q.push(ne);
                    }else if(colour[ne] != -colour[cur]){
                        return false;
                    }
                }
            }
        }

        return true;
    }
};


