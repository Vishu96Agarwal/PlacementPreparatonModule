#Leetcode Problem 28. Find the Index of the First Occurrence in a String

class Solution {
public:
    int strStr(string haystack, string needle) {
        int hLen = haystack.length();
        int nLen = needle.length();
        int nIndex = 0;
        for(int i=0; i<hLen; i++){
            if(haystack[i]==needle[nIndex]){
                nIndex++;
            }
            else{
                i=i-nIndex;
                nIndex=0;
            }
            if(nIndex==nLen){   
                return i-nLen+1;
            }
        }
        return -1;
    }
};


#Leetcode Problem 242. Valid Anagram

class Solution {
public:
    bool isAnagram(string s, string t) {
        sort(s.begin(), s.end());
        sort(t.begin(), t.end());
        return s == t;
    }
};


#Leetcode Problem 38. Count and Say

class Solution {
public:
    string countAndSay(int n) {
        if(n == 1) return "1";
        if(n == 2) return "11";
        int i, j, count;
        string s, prev = "11";
        for(i = 3; i <= n; i++) {
            s = "";
            count = 1;
            for(j = 1; j < prev.length(); j++) {
                if(prev[j] != prev[j-1]) {
                    s += to_string(count) + prev[j-1];
                    count = 1;
                }
                else count++;
            }
            s += to_string(count) + prev[j-1];
            prev = s;
        }
        return s;
    }
};


#Leetcode Problem 165. Compare Version Numbers

class Solution {
public:
    int compareVersion(string version1, string version2) {
        int i=0, j=0, ans1=0, ans2=0;
        while(i<version1.size() || j<version2.size()){
            while(i<version1.size() && version1[i]!='.'){
                ans1*=10;
                ans1+=(version1[i]-'0');
                i++;
            }
            while(j<version2.size() && version2[j]!='.'){
                ans2*=10;
                ans2+=(version2[j]-'0');
                j++;
            }
            if(ans1<ans2){return -1;}
            if(ans1>ans2){return 1;}
            i++;
            j++;
            ans1=0;
            ans2=0;
        }
        return 0;
    }
};
