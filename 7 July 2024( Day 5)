#Leetcode Problem 206. Reverse Linked List

class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        
        ListNode* prev = NULL;
        ListNode* curr = head;

        while(curr!=NULL){
            ListNode* next = curr->next;
            curr->next = prev;
            prev = curr;
            curr = next;
        }
        return prev;
    }
};


#Leetcode Problem 876. Middle of the Linked List

class Solution {
public:
    ListNode* middleNode(ListNode* head) {
	
        int size = 0;
        
        ListNode* temp = head;
       
        while (temp) {
            size++;
            temp = temp -> next;
        }
     
        int original_size = size;
     
        int half = size / 2;
        
        while (head) {
            if ((original_size % 2 == 0 && size == half) || (original_size % 2 != 0 && size - 1 == half)) {
                break;
            }
            head = head -> next;
            size--;
        }
        
        return head;
    }
};


#Leetcode Problem 21. Merge Two Sorted Lists

class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        ListNode*dummy = new ListNode(0);
        ListNode * curr= dummy;
        while(l1!=NULL && l2!=NULL){
            if(l1->val<=l2->val){
                curr->next=l1;
                l1=l1->next;
            }
            else{
                curr->next =l2;
                l2=l2->next;
            }
            curr=curr->next;
        }
        curr->next =l1!=NULL ? l1:l2;
        return dummy->next;
    }
};

#Leetcode Problem 19. Remove Nth Node From End of List

class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int k) {
        ListNode *pre_slow, *slow, *fast;
        pre_slow=NULL;
        slow=fast=head;
        
        for(int i=0;i<k;i++) fast=fast->next;
        
        while(fast!=NULL){
            pre_slow=slow;
            slow=slow->next;
            fast=fast->next;
        }
        
        if(pre_slow==NULL){
            ListNode* new_head = head->next;
            delete head;
            return new_head;
        }
    
        pre_slow->next=slow->next;
        slow->next=NULL;
        delete slow;
        
        return head;
    }


#Leetcode Problem 2. Add Two Numbers

class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode *dummy = new ListNode(0);
        ListNode *curr = dummy;
        int carry = 0;
        
        while(l1 != NULL || l2 != NULL || carry == 1){
            int sum = 0;
            if(l1 != NULL){
                sum += l1->val;
                l1 = l1->next;
            }
            if(l2 != NULL){
                sum += l2->val;
                l2 = l2->next;
            }
            sum += carry;
            carry = sum/10;
            ListNode *node = new ListNode(sum % 10);
            curr->next = node;
            curr = curr->next;
        }
        return dummy->next;
    }
};

